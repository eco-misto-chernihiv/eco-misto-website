---
// Tools
import { getCollection, render } from "astro:content";
import type { CollectionEntry } from "astro:content";
import { getSortedProjects } from "@/lib/helpers.js";
import type { Lang } from "@/i18n/defaultLangOptions";

// Layouts
import BaseLayout from "@/layouts/BaseLayout.astro";
import ProjectLayout from "@/layouts/ProjectLayout.astro";

// Compositions
import Center from "@/components/compositions/Center.astro";
import Stack from "@/components/compositions/Stack.astro";
import Row from "@/components/compositions/Row.astro";

// Components
import Heading from "@/components/ui/Heading.astro";
import Text from "@/components/ui/Text.astro";
import Section from "@/components/ui/Section.astro";
import H2 from "@/components/project/H2.astro";
import H3 from "@/components/project/H3.astro";
import ProjectLink from "@/components/project/ProjectLink.astro";
import MyPicture from "@/components/ui/MyPicture.astro";
import RelatedProjects from "@/components/project/RelatedProjects.astro";
import CallToAction from "@/components/project/CallToAction.astro";
import { components } from "@/components/mdxComponents.js";

import ButtonArrow from "@/components/ui/ButtonArrow.astro";
import { getProjectLang } from "@/i18n/getProjectLang";
import { getProjectIdWithoutLang } from "@/i18n/getProjectIdWithoutLang";

// Data
import { buttonsData } from "@/data/siteData";

// Routes
export async function getStaticPaths() {
  // filter actual posts, not drafts
  const projects = await getCollection("projects", ({ data }) => !data.isDraft);

  // return object with slug and post data
  return projects.map((project) => {
    const lang = getProjectLang(project.id) as Lang;
    const id = getProjectIdWithoutLang(project.id);

    return {
      params: {
        lang,
        slug: id,
      },
      props: {
        project,
        projects,
      },
    };
  });
}

// Types
interface Props {
  project: CollectionEntry<"projects">;
  projects: CollectionEntry<"projects">[];
}

// Props
const { project, projects } = Astro.props;
const { lang } = Astro.params;

const { Content } = await render(project);
const { title, description, cover, isCollage = false } = project.data;

// Sort projects
const sortedProjects = getSortedProjects(projects);

// Get active and archive projects
const activeProjects = sortedProjects
  .filter((p) => p.data.isActive && p.id !== project.id)
  .filter((p) => p.id.startsWith(lang));

const archiveProjects = sortedProjects
  .filter((p) => !p.data.isActive && p.id !== project.id)
  .filter((p) => p.id.startsWith(lang));

const isActive = project.data.isActive;

const relatedProjects = isActive ? activeProjects : archiveProjects;

// OG template
const template = cover.image.format === "png" ? "projectCover" : "projectPhoto";

// Translations
const buttons = buttonsData[lang];
const otherProjects = lang === "uk" ? "Інші проєкти" : "Other projects";
const ecoMisto = lang === "uk" ? "Еко Місто" : "Eco Misto";
---

<BaseLayout
  seo={{ title: `${title} | ${ecoMisto}`, description }}
  ogImage={{
    template,
    data: {
      title: `${title} | ${ecoMisto}`,
      image: `${Astro.url.origin}/${cover.image.src}`,
      alt: cover.alt,
    },
  }}
  type="article"
>
  <Section class="hero" color="white">
    <Center
      maxWidth="80rem"
      space={{ default: "space-6", tablet: "space-7", laptop: "space-9" }}
    >
      <div class="wrapper">
        <div class="text-wrapper">
          <Stack space="space-2" class="hero-text">
            <Heading
              tagName="h1"
              size="h3"
              class="title font-heading color-secondary">{title}</Heading
            >
            <Text tagName="p" size="large">{description}</Text>
          </Stack>
        </div>

        <div class:list={["hero-img", { collage: isCollage }]}>
          <MyPicture src={cover.image} alt="" width={1120} />
        </div>
      </div>
    </Center>
  </Section>

  <ProjectLayout>
    <Content components={{ ...components, h2: H2, h3: H3, a: ProjectLink }} />
  </ProjectLayout>

  {
    isActive ? (
      <>
        <CallToAction />
      </>
    ) : (
      ""
    )
  }
  <Center
    maxWidth="68.75rem"
    space={{ default: "space-6", tablet: "space-7", laptop: "space-9" }}
    class="related-projects"
  >
    <Stack space={{ default: "space-7", tablet: "space-10" }}>
      <Row
        alignItems="baseline"
        rowGap={{ default: "space-4", tablet: "space-0" }}
      >
        <Heading
          tagName="h3"
          size="h5"
          class="col-12 tablet:col-6 color-secondary">{otherProjects}</Heading
        >
        <div class="col-12 tablet:col-6 all-projects">
          <ButtonArrow tagName="a" style="primary" href="/projects"
            >{buttons.allProjects}
          </ButtonArrow>
        </div>
      </Row>

      <RelatedProjects relatedProjects={relatedProjects} />
    </Stack>
  </Center>
</BaseLayout>

<style>
  @import "@styles/04-utilities/breakpoints.css";

  .hero {
    --_border-radius: var(--rounded-2xl);
    --_offset-left: 20%;
    --_padding: var(--space-11-fixed);

    padding-block-start: calc(var(--_padding) + var(--header-height));

    /* padding-block-end: var(--space-11-fixed); */

    @media (--tablet-and-up) {
      --_padding: var(--space-13-fixed);
    }

    @media (--laptop-and-up) {
      --_border-radius: var(--rounded-3xl);
      --_padding: var(--space-11-fixed);
    }
  }

  .wrapper {
    display: grid;
    gap: var(--space-6-fixed);

    @media (--tablet-and-up) {
      gap: var(--space-8-fixed);
    }

    @media (--laptop-and-up) {
      grid-template-columns: max-content 1fr;
      gap: var(--space-6-fixed);
    }
  }

  .text-wrapper {
  }

  .hero-text {
    max-width: 60ch;
    margin-inline: auto;

    text-align: center;

    & .title {
    }

    @media (--laptop-and-up) {
      /* min-width: fit-content; */
      /* max-width: 26rem; */
      /* padding-block-start: var(--space-15-fixed); */
      padding-block-start: clamp(6rem, 8vw, 10rem);
      max-width: 35ch;
      margin-inline: 0;
      text-align: left;
    }
  }

  .img-wrapper {
  }

  .hero-img {
    /* isolate stacking context */
    isolation: isolate;
    /* --_height: 24rem; */

    /* inline-size: 100%; */
    /* block-size: var(--_height); */

    background-color: var(--color-accent);

    border-radius: var(--_border-radius);

    & > :global(picture) {
      height: 100%;
    }

    & > :global(picture),
    & > :global(picture) > :global(img) {
      object-fit: cover;
      inline-size: 100%;
      block-size: 100%;
      border-radius: var(--_border-radius);
    }

    &.collage {
      position: relative;
      background-color: transparent;
      z-index: 2;
      /* padding: var(--space-4-fixed); */
    }

    &.collage::before {
      content: "";
      display: block;
      position: absolute;
      background-color: var(--color-accent);
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      z-index: -1;
      width: 90%;
      height: 90%;

      border-radius: var(--_border-radius);
    }

    &.collage > :global(picture),
    &.collage > :global(picture) > :global(img) {
    }

    @media (--tablet-and-up) {
      /* --_height: 35rem; */
    }

    @media (--laptop-and-up) {
      /* --_height: 40rem; */
    }
  }

  .related-projects {
    padding-block: var(--space-11-fixed);

    @media (--tablet-and-up) {
      padding-block: var(--space-13-fixed);
    }
  }

  .all-projects {
    display: flex;
    justify-content: flex-start;

    @media (--tablet-and-up) {
      justify-content: flex-end;
    }
  }
</style>
