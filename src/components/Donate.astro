---
// Tools
import type { Lang } from "@/i18n/defaultLangOptions";

// Compositions
import Cluster from "./compositions/Cluster.astro";
import Stack from "./compositions/Stack.astro";
import Button from "./ui/Button.astro";

// Components
import UserDataAgreement from "./UserDataAgreement.astro";
import Heading from "./ui/Heading.astro";
import InputGroup from "./ui/InputGroup.astro";
import Text from "./ui/Text.astro";

// Data
import { donateData, donateText, buttonsData } from "@/data/siteData.ts";

const currentLocale = Astro.currentLocale as Lang;
const donateInuts = donateData[currentLocale];
const text = donateText[currentLocale];
const buttons = buttonsData[currentLocale];

const [amountData, emailData] = donateInuts;

// TODO: Because i have same code in multiple modals, i need unique ids for each id-label pair
const id = crypto.randomUUID();

const PUBLIC_LIQPAY_KEY = process.env.PUBLIC_LIQPAY_KEY;
---

<aside class="donate aside-modal">
  <form action="" data-form="donate" data-liqpay-key={PUBLIC_LIQPAY_KEY}>
    <Stack space="space-4" class="header">
      <Heading tagName="h2" size="h6" class="color-secondary font-heading"
        >{text.title}</Heading
      >
      <Text tagName="p" size="small">{text.description}</Text>
    </Stack>
    <div class="main">
      <Stack space="space-6">
        <Cluster alignItems="baseline" class="donate-tabs">
          <input
            type="radio"
            name="pay"
            id={`pay-once-${id}`}
            value="pay"
            checked
          />
          <Text
            tagName="label"
            size="small"
            class="font-medium"
            for={`pay-once-${id}`}>{text.pay}</Text
          >

          <input
            type="radio"
            name="pay"
            id={`pay-monthly-${id}`}
            value="subscribe"
          />
          <Text
            tagName="label"
            size="small"
            class="font-medium"
            for={`pay-monthly-${id}`}>{text.subscribe}</Text
          >
        </Cluster>

        <Stack space="space-8">
          <Stack space="space-4">
            <InputGroup data={amountData} />

            <Cluster space="space-3" class="choice-row">
              <Button style="accent" size="x-small" variant="chip" type="button"
                >+100</Button
              >
              <Button style="accent" size="x-small" variant="chip" type="button"
                >+200</Button
              >
              <Button style="accent" size="x-small" variant="chip" type="button"
                >+500</Button
              >
            </Cluster>
          </Stack>
          <InputGroup data={emailData} />
        </Stack>
      </Stack>
    </div>

    <Stack space="space-7" class="footer">
      <UserDataAgreement />
      <Button style="secondary" type="submit"> {buttons.support} </Button>
    </Stack>
  </form>
</aside>

<style>
  .donate-tabs label {
    color: var(--color-gray-400);
    cursor: pointer;

    transition: color var(--transition-default);
  }

  .donate-tabs input[type="radio"] {
    position: absolute;
    opacity: 0;
    width: 1px;
    height: 1px;
    overflow: hidden;
  }

  .donate-tabs input[type="radio"]:checked,
  .donate-tabs input[type="radio"]:hover {
    & + label {
      color: var(--color-black);
    }
  }

  .donate-tabs input[type="radio"]:focus-visible {
    & + label {
      outline: 2px solid var(--color-primary);
      outline-offset: 4px;
      border-radius: var(--rounded-sm);
    }
  }
</style>

<script>
  import sanitizeHtml from "sanitize-html";
  import type { LiqPayObject, LiqPayAction } from "@/lib/types.ts";
  import { format } from "date-fns";
  import {
    encodeBase64,
    updateBrowserHistory,
    getURLAndSearchParams,
  } from "../lib/helpers.js";

  type FormValues = {
    pay: LiqPayAction;
    amount: string;
    email: string;
  };

  document.addEventListener("astro:page-load", () => {
    // Get all forms
    const forms = [
      ...document.querySelectorAll("form[data-form='donate']"),
    ] as HTMLFormElement[];

    // Loop through them
    forms.forEach((form) => {
      /**
       * Elements
       */
      // Get number element
      const moneyInputElement = form.querySelector(
        'input[type="number"]'
      ) as HTMLInputElement;

      /**
       * Helpers
       */

      /**
       * Retrieves the public key from the form's data attribute.
       * @returns {string} The public key.
       */
      function getPublicKey(): string {
        const key = form.getAttribute("data-liqpay-key") || "";

        if (!key) {
          throw new Error("Please provide public key");
        }

        return key;
      }

      /**
       * Generates a formatted date string for the current date and time.
       * @returns {string} The formatted date string.
       */
      function getFormattedSubscribeDate(): string {
        return format(new Date(), "yyyy-MM-dd HH:mm:ss");
      }

      /**
       * Generates a unique order ID.
       * @returns {string} The generated order ID.
       */
      function generateOrderId(): string {
        return `order_id-${crypto.randomUUID()}`;
      }

      /**
       * Creates a LiqPay data object from form values.
       * @param {FormValues} values - The form values.
       * @returns {LiqPayObject} The LiqPay data object
       */
      function createLiqPayData(values: FormValues): LiqPayObject {
        const { pay, email, amount } = values;
        const public_key = getPublicKey();

        return {
          public_key,
          version: 3,
          action: pay,
          subscribe_date_start: getFormattedSubscribeDate(),
          subscribe_periodicity: "month",
          amount: parseFloat(amount),
          paytypes: "gpay,apay,card,privat24",
          currency: "UAH",
          description: "Благодійний внесок на статутну діяльність",
          order_id: generateOrderId(),
          result_url: `${window.location.href}`,
          server_url: "https://ecomisto.org/api/liqpay-sendpulse",
          dae: encodeBase64(JSON.stringify({ email })),
        };
      }

      /**
       * Retrieves a signature from the server by sending a POST request with JSON data.
       * @async
       * @param {String} jsonString — The JSON string to be sent in the request body.
       * @returns {Promise<string>} A promise that resolves to the signature string received from the server.
       */
      async function getSignature(jsonString: string): Promise<"string"> {
        // Send json string to checkout route
        const request = await fetch("/api/checkout", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ data: jsonString }),
        });

        // if request failed throw request
        if (!request.ok) {
          throw request;
        }

        // Get signature from response
        const response = await request.json();

        return response.data;
      }

      /**
       * Create and submit form with data to liqpay
       * @param {String} jsonString
       * @param {String} signature
       */
      function sumbitFormToLiqPay(jsonString: string, signature: string) {
        const form = document.createElement("form");
        form.method = "POST";
        form.action = "https://www.liqpay.ua/api/3/checkout";
        form.innerHTML = `
        <input type="hidden" name="data" value="${jsonString}" />
        <input type="hidden" name="signature" value="${signature}" />
  `;

        document.body.appendChild(form);
        form.submit();
        document.body.removeChild(form);
      }

      /**
       * Handlers
       */

      function handleChipButton(chipButton: HTMLButtonElement) {
        // Get choice and number input values and convert them to a number
        const choice = Number(chipButton.textContent);
        const moneyInput = Number(moneyInputElement.value);

        // Set new number input value and convert it to string
        moneyInputElement.value = (choice + moneyInput).toString();
      }

      function handlePayRadioButton(radioButton: HTMLInputElement) {
        const { url, params } = getURLAndSearchParams();

        if (!params.has("donate")) return;

        params.set("donate", radioButton.value);
        url.search = params.toString();

        updateBrowserHistory(url);
      }

      /**
       * Add choice values to a number input
       * @param {Object} event
       */
      function handleClick(event: Event) {
        // Matching strategy
        const target = event.target as HTMLElement;
        const chipButton = target.closest(
          "[data-variant='chip']"
        ) as HTMLButtonElement;
        const radioButton = target.closest(
          "input[type='radio']"
        ) as HTMLInputElement;

        if (chipButton) {
          handleChipButton(chipButton);
          return;
        }

        if (radioButton) {
          handlePayRadioButton(radioButton);
          return;
        }
      }

      /**
       * Submit data to liqpay
       * @param {SubmitEvent} event
       */
      async function handleSubmit(event: SubmitEvent) {
        event.preventDefault();

        try {
          // Get data
          const formData = new FormData(form);

          let { pay, amount, email } = Object.fromEntries(
            formData
          ) as FormValues;

          // If no values do nothing
          if (!pay || !amount || !email) {
            // TODO: Show errors in the UI
            console.error("Please include all required values");
            return;
          }

          // Sanitize values
          email = sanitizeHtml(email.trim());
          amount = sanitizeHtml(amount.trim());

          // Create data
          const data = createLiqPayData({ pay, email, amount });

          // Encode data into base64 string
          const jsonString = encodeBase64(JSON.stringify(data));

          const signature = await getSignature(jsonString);

          sumbitFormToLiqPay(jsonString, signature);
        } catch (error) {
          console.error(error);
          console.error("Something went wrong, try again!");
        }
      }

      /**
       * Event Liseners
       */
      form?.addEventListener("click", handleClick);
      form?.addEventListener("submit", handleSubmit);
    });
  });
</script>
